/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IPFSChatInterface extends utils.Interface {
  functions: {
    "messageCount(address)": FunctionFragment;
    "publicKeyOf(address)": FunctionFragment;
    "publicKeys(address)": FunctionFragment;
    "sendMessageTo(string,address)": FunctionFragment;
    "setPublicKey(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "messageCount"
      | "publicKeyOf"
      | "publicKeys"
      | "sendMessageTo"
      | "setPublicKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "messageCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeys",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageTo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicKey",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "messageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "publicKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicKey",
    data: BytesLike
  ): Result;

  events: {
    "Message(address,address,string)": EventFragment;
    "NewPublicKey(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPublicKey"): EventFragment;
}

export interface MessageEventObject {
  _sender: string;
  _recepient: string;
  _message: string;
}
export type MessageEvent = TypedEvent<
  [string, string, string],
  MessageEventObject
>;

export type MessageEventFilter = TypedEventFilter<MessageEvent>;

export interface NewPublicKeyEventObject {
  _account: string;
  _publicKey: string;
}
export type NewPublicKeyEvent = TypedEvent<
  [string, string],
  NewPublicKeyEventObject
>;

export type NewPublicKeyEventFilter = TypedEventFilter<NewPublicKeyEvent>;

export interface IPFSChat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPFSChatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    messageCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicKeyOf(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicKeys(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sendMessageTo(
      _message: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicKey(
      _public_key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  messageCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publicKeyOf(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  publicKeys(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  sendMessageTo(
    _message: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicKey(
    _public_key: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    messageCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyOf(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    publicKeys(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    sendMessageTo(
      _message: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicKey(
      _public_key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Message(address,address,string)"(
      _sender?: null,
      _recepient?: PromiseOrValue<string> | null,
      _message?: null
    ): MessageEventFilter;
    Message(
      _sender?: null,
      _recepient?: PromiseOrValue<string> | null,
      _message?: null
    ): MessageEventFilter;

    "NewPublicKey(address,string)"(
      _account?: PromiseOrValue<string> | null,
      _publicKey?: null
    ): NewPublicKeyEventFilter;
    NewPublicKey(
      _account?: PromiseOrValue<string> | null,
      _publicKey?: null
    ): NewPublicKeyEventFilter;
  };

  estimateGas: {
    messageCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyOf(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeys(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessageTo(
      _message: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicKey(
      _public_key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    messageCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeyOf(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeys(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendMessageTo(
      _message: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicKey(
      _public_key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
